title: Skupper Hello World
subtitle: A minimal HTTP application deployed across Kubernetes clusters using Skupper
github_actions_url: https://github.com/skupperproject/skupper-example-hello-world/actions/workflows/main.yaml
overview: |
  This example is a very simple multi-service HTTP application that can
  be deployed across multiple Kubernetes clusters using Skupper.

  It contains two services:

  * A backend service that exposes an `/api/hello` endpoint.  It
    returns greetings of the form `Hello from <pod-name>
    (<request-count>)`.

  * A frontend service that accepts HTTP requests, calls the backend
    to fetch new greetings, and serves them to the user.

  With Skupper, you can place the backend in one cluster and the
  frontend in another and maintain connectivity between the two
  services without exposing the backend to the public internet.

  <img src="images/entities.svg" width="640"/>
prerequisites: !string prerequisites
sites:
  west:
    kubeconfig: ~/.kube/config-west
    namespace: west
  local:
    kubeconfig: ~/.kube/config-local
    namespace: local
steps:
  - standard: configure_separate_console_sessions
  - standard: access_your_clusters
  - standard: set_up_your_namespaces
  - title: Install Skupper in your namespaces
    preamble: !string install_skupper_in_your_namespaces_preamble
    commands:
      west:
        - run: skupper init
          await: [deployment/skupper-service-controller, deployment/skupper-router]
  - standard: check_the_status_of_your_namespaces
  - title: Deploy the frontend and backend services
    preamble: |
      Use `kubectl create deployment` to deploy the frontend service
      in `west` and the backend service in `local`.
    commands:
      west:
        - run: kubectl create deployment hello-world-frontend --image quay.io/skupper/hello-world-frontend
          await: [deployment/hello-world-frontend]
      local:
        - run: python ./backend/main.py &
  - title: Expose the backend service
    preamble: |
      We now have the frontend running, but
      no backend service is available to it. 

      Use `skupper gateway` commands to expose the backend service to the
      frontend service.
    commands:
      west:
        - run: skupper service create hello-world-backend 8080
        - run: skupper gateway init --type podman
        - run: skupper gateway bind hello-world-backend localhost 8081
  - title: Expose the frontend service
    preamble: |
      We have established connectivity between the two namespaces and
      made the backend in `local` available to the frontend in `west`.
      Before we can test the application, we need external access to
      the frontend.

      Use `kubectl expose` with `--type LoadBalancer` to open network
      access to the frontend service.  Use `kubectl get services` to
      check for the service and its external IP address.
    commands:
      west:
        - run: kubectl expose deployment/hello-world-frontend --port 8080 --type LoadBalancer
          await_external_ip: [service/hello-world-frontend]
          output: |
            service/hello-world-frontend exposed
        - run: kubectl get services
          output: |
            NAME                   TYPE           CLUSTER-IP       EXTERNAL-IP      PORT(S)                           AGE
            hello-world-backend    ClusterIP      10.107.66.1      <none>           8080/TCP                          5d23h
            hello-world-frontend   LoadBalancer   10.107.149.157   10.107.149.157   8080:31808/TCP                    5d23h
            skupper                LoadBalancer   10.100.77.228    10.100.77.228    8080:31849/TCP,8081:31319/TCP     5d23h
            skupper-router         LoadBalancer   10.97.50.151     10.97.50.151     55671:31891/TCP,45671:30626/TCP   5d23h
            skupper-router-local   ClusterIP      10.102.242.176   <none>           5671/TCP                          5d23h
  - title: Test the application
    preamble: |
      Look up the external URL and use `curl` to send a request.
    commands:
      west:
        - run: "curl -f $(kubectl get service hello-world-frontend -o jsonpath='http://{.status.loadBalancer.ingress[0].ip}:8080/')"
          output: |
            I am the frontend.  The backend says 'Hello from hello-world-backend-869cd94f69-wh6zt (1)'.
    postamble: |
      **Note:** If the embedded `kubectl get` command fails to get the
      IP address, you can find it manually by running `kubectl get
      services` and looking up the external IP of the
      `hello-world-frontend` service.
summary: |
  This example locates the frontend and backend services in different
  namespaces, on different clusters.  Ordinarily, this means that they
  have no way to communicate unless they are exposed to the public
  internet.

  Introducing Skupper into each namespace allows us to create a virtual
  application network that can connect services in different clusters.
  Any service exposed on the application network is represented as a
  local service in all of the linked namespaces.

  The backend service is located in `local`, but the frontend service
  in `west` can "see" it as if it were local.  When the frontend
  sends a request to the backend, Skupper forwards the request to the
  namespace where the backend is running and routes the response back to
  the frontend.

  <img src="images/sequence.svg" width="640"/>
cleaning_up:
  preamble: !string cleaning_up_preamble
  commands:
    west:
      - run: skupper gateway delete
      - run: skupper delete
      - run: kubectl delete service/hello-world-frontend
      - run: kubectl delete deployment/hello-world-frontend
    local:
      - run: ps -ef | grep main.py | grep -v grep | awk '{print $2}' | xargs kill
next_steps: !string next_steps
